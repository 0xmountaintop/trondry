---
description: 
globs: 
alwaysApply: false
---
# Scratchpad

## Current Task: Adapting Foundry to Support Tron Network (Minimal Modifications)

### High-Level Goals
- Extend Foundry (forge, cast, anvil) to interoperate with Tron nodes and the TVM.
- Minimize invasive changes by introducing compatibility layers & config presets.
- Preserve Ethereum workflows for users (compile, test, deploy) while masking Tron quirks.

### Progress Update

**Completed:**
- ✅ Task 1: Familiarization & Architecture Review
- ✅ Task 2: Tron Chain Configuration (added Tron mainnet & Shasta to chain configs)
- ✅ Task 3.1: Created Tron adapter module with helper functions
- ✅ Task 3.3: Implemented transaction count (nonce) handling for Tron (always returns 0)
- ✅ Added comprehensive tests for Tron chain ID and transaction count functionality

**Key Findings:**
- Foundry's chain configuration system is flexible and easily extensible
- The `eth_getTransactionCount` method can be intercepted at the EthApi level
- Tron adapter pattern works well for handling chain-specific differences
- Tests confirm that Tron chains return nonce=0 while preserving Ethereum behavior

**Next Priority:**
- Task 4: Transaction Adapter (implement both JSON-RPC and gRPC broadcast flows)
- Task 3.2: Handle state root injection for Tron blocks
- Task 3.4-3.5: Address format handling and block tag normalization

### TODO

[X] 1. Familiarization & Architecture Review
    [X] 1.1 Survey Foundry crates interacting with JSON-RPC (`cast`, `forge`, `anvil` HTTP server).
    [X] 1.2 Locate serialization types that assume Ethereum-specific fields (e.g. `stateRoot`, `nonce`).
    [X] 1.3 Identify transaction signing & broadcast flow.

[X] 2. Tron Chain Configuration
    [X] 2.1 Add `tron-mainnet` & `tron-shasta` variants in chain config crate (chainId, network name).
    [X] 2.2 Expose CLI flag/env var to select Tron (`--chain tron`).

[ ] 3. JSON-RPC Compatibility Layer
    [X] 3.1 Create Tron adapter module with helper functions.
    [ ] 3.2 Inject dummy `stateRoot` for Tron blocks if missing.
    [X] 3.3 Return constant `0x0` for `eth_getTransactionCount`.
    [ ] 3.4 Force block tags to `"latest"` for unsupported historical queries.
    [ ] 3.5 Handle address format conversion (0x41 prefix).

[ ] 4. Transaction Adapter
    [ ] 4.1 Build common signing & protobuf serialization module.
    [ ] 4.2 Implement JSON-RPC path: send protobuf bytes via `eth_sendRawTransaction`.
    [ ] 4.3 Implement gRPC path: call `broadcastTransaction` on Tron node.
    [ ] 4.4 Expose selection via CLI flag/env (`--tron-tx-mode {jsonrpc,grpc,auto}`; default `auto` attempts JSON-RPC then gRPC fallback).
    [ ] 4.5 Integrate adapter under `tron` feature flag.

[ ] 5. Anvil "Tron Mode"
    [ ] 5.1 Add chain preset (chainId, energyPrice mapping).
    [ ] 5.2 Relax gas checks; map gas↔energy 1:1.
    [ ] 5.3 Pre-fund TRX balances in genesis.

[ ] 6. Tests & CI
    [ ] 6.1 Unit tests for RPC adapter transformations.
    [ ] 6.2 Unit tests for protobuf serializer (round-trip encode/decode).
    [ ] 6.3 E2E: deploy TRC-20 via JSON-RPC path on local anvil-tron.
    [ ] 6.4 E2E: deploy TRC-20 via gRPC path against mock or Shasta node.
    [ ] 6.5 Optional: CI matrix covers both tx modes behind feature flags.

[ ] 7. Documentation
    [ ] 7.1 Update README & docs to include Tron usage.
    [ ] 7.2 Highlight limitations (no historical forking, nonce stub, etc.).

[ ] 8. Release Plan & Stabilization
    [ ] 8.1 Feature gate (`--experimental-tron`).
    [ ] 8.2 Solicit community feedback.

---

## Architecture Review Findings

### JSON-RPC Client Architecture
- **Anvil**: `crates/anvil/src/eth/api.rs` - Main EthApi implementation with all RPC handlers
- **Cast**: Uses `alloy_provider::Provider` for RPC calls, see `crates/cast/src/lib.rs`
- **Common**: `foundry_common::provider::ProviderBuilder` used across tools

### Key RPC Methods to Adapt
- `eth_getBlockByNumber` - needs `stateRoot` injection
- `eth_getTransactionCount` - needs nonce stub for Tron
- `eth_sendRawTransaction` - needs Tron protobuf support
- Block/transaction serialization in `alloy_rpc_types`

### Transaction Flow
- **Signing**: `crates/anvil/src/eth/api.rs:sign_request()` 
- **Broadcasting**: `send_raw_transaction()` in same file
- **Script Broadcasting**: `crates/script/src/broadcast.rs`
- **Cast Send**: `crates/cast/src/cmd/send.rs`

### Chain Configuration
- **Anvil Config**: `crates/anvil/src/config.rs` - CHAIN_ID constant, NodeConfig
- **Cheatcodes**: `crates/cheatcodes/src/config.rs` - create_default_chains()
- **Common**: Chain enum and configuration spread across multiple crates

## Lessons
(Keep this updated with recurring fixes & best practices)


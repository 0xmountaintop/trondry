# Scratchpad

## Current Task: Adapting Foundry to Support Tron Network (Minimal Modifications)

### High-Level Goals
- Extend Foundry (forge, cast, anvil) to interoperate with Tron nodes and the TVM.
- Minimize invasive changes by introducing compatibility layers & config presets.
- Preserve Ethereum workflows for users (compile, test, deploy) while masking Tron quirks.

### TODO

[ ] 1. Familiarization & Architecture Review
    [ ] 1.1 Survey Foundry crates interacting with JSON-RPC (`cast`, `forge`, `anvil` HTTP server).
    [ ] 1.2 Locate serialization types that assume Ethereum-specific fields (e.g. `stateRoot`, `nonce`).
    [ ] 1.3 Identify transaction signing & broadcast flow.

[ ] 2. Tron Chain Configuration
    [ ] 2.1 Add `tron-mainnet` & `tron-shasta` variants in chain config crate (chainId, network name).
    [ ] 2.2 Expose CLI flag/env var to select Tron (`--chain tron`).

[ ] 3. JSON-RPC Compatibility Layer
    [ ] 3.1 Wrap RPC client to intercept/transform requests & responses.
    [ ] 3.2 Inject dummy `stateRoot` in block payloads.
    [ ] 3.3 Return constant `0x0` for `eth_getTransactionCount`.
    [ ] 3.4 Normalize address prefixes (strip/append `0x41`).
    [ ] 3.5 Force unsupported block tags to `latest`.
    [ ] 3.6 Gracefully stub unsupported methods.

[ ] 4. Transaction Adapter
    [ ] 4.1 Build common signing & protobuf serialization module.
    [ ] 4.2 Implement JSON-RPC path: send protobuf bytes via `eth_sendRawTransaction`.
    [ ] 4.3 Implement gRPC path: call `broadcastTransaction` on Tron node.
    [ ] 4.4 Expose selection via CLI flag/env (`--tron-tx-mode {jsonrpc,grpc,auto}`; default `auto` attempts JSON-RPC then gRPC fallback).
    [ ] 4.5 Integrate adapter under `tron` feature flag.

[ ] 5. Anvil "Tron Mode"
    [ ] 5.1 Add chain preset (chainId, energyPrice mapping).
    [ ] 5.2 Relax gas checks; map gasâ†”energy 1:1.
    [ ] 5.3 Pre-fund TRX balances in genesis.

[ ] 6. Tests & CI
    [ ] 6.1 Unit tests for RPC adapter transformations.
    [ ] 6.2 Unit tests for protobuf serializer (round-trip encode/decode).
    [ ] 6.3 E2E: deploy TRC-20 via JSON-RPC path on local anvil-tron.
    [ ] 6.4 E2E: deploy TRC-20 via gRPC path against mock or Shasta node.
    [ ] 6.5 Optional: CI matrix covers both tx modes behind feature flags.

[ ] 7. Documentation
    [ ] 7.1 Update README & docs to include Tron usage.
    [ ] 7.2 Highlight limitations (no historical forking, nonce stub, etc.).

[ ] 8. Release Plan & Stabilization
    [ ] 8.1 Feature gate (`--experimental-tron`).
    [ ] 8.2 Solicit community feedback.

---

## Lessons
(Keep this updated with recurring fixes & best practices)

